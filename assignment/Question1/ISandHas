Q1) Explain the difference between IS-A and Has-A relationship with the help of an
     example and explain about access modifiers and their accessibility?
     
sol: IS-A

     1> In object-oriented programming, the concept of IS-A is a totally based on Inheritance, which can be of two types Class Inheritance or Interface Inheritance. It is just like saying "A is a B type of thing". For example, Apple is a Fruit, Car is a Vehicle etc.
       Inheritance is uni-directional. For example, House is a Building. But Building is not a House. 
     
     2>it is a key point to note that you can easily identify the IS-A relationship. Wherever you see an extends keyword or implements keyword in a class declaration, then this class is said to have IS-A relationship.  
     
     Has-A
     1>Composition(HAS-A) simply mean the use of instance variables that are references to other objects. For example Maruti has Engine, or House has Bathroom.
     
     Access modifier: The access modifiers in Java specifies the accessibility or scope of a field, method, constructor, or class. We can change the access level of fields, constructors, methods,
                        and class by applying the access modifier on it.
                        
                        There are four types of Java access modifiers:
                      1>Private: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.
                      2>Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default. 
                      3>Protected: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.
                      4>Public: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package.    